; ModuleID = 'emotet'
source_filename = "emotet"
target datalayout = "e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

@0 = internal global i64 0
@cf = internal global i1 false
@pf = internal global i1 false
@az = internal global i1 false
@zf = internal global i1 false
@sf = internal global i1 false
@tf = internal global i1 false
@if = internal global i1 false
@df = internal global i1 false
@of = internal global i1 false
@iopl = internal global i2 0
@nt = internal global i1 false
@rf = internal global i1 false
@vm = internal global i1 false
@ac = internal global i1 false
@vif = internal global i1 false
@vip = internal global i1 false
@id = internal global i1 false
@eflags = internal global i32 0
@ss = internal global i16 0
@cs = internal global i16 0
@ds = internal global i16 0
@es = internal global i16 0
@fs = internal global i16 0
@gs = internal global i16 0
@st0 = internal global x86_fp80 0xK00000000000000000000
@st1 = internal global x86_fp80 0xK00000000000000000000
@st2 = internal global x86_fp80 0xK00000000000000000000
@st3 = internal global x86_fp80 0xK00000000000000000000
@st4 = internal global x86_fp80 0xK00000000000000000000
@st5 = internal global x86_fp80 0xK00000000000000000000
@st6 = internal global x86_fp80 0xK00000000000000000000
@st7 = internal global x86_fp80 0xK00000000000000000000
@fpu_stat_IE = internal global i1 false
@fpu_stat_DE = internal global i1 false
@fpu_stat_ZE = internal global i1 false
@fpu_stat_OE = internal global i1 false
@fpu_stat_UE = internal global i1 false
@fpu_stat_PE = internal global i1 false
@fpu_stat_SF = internal global i1 false
@fpu_stat_ES = internal global i1 false
@fpu_stat_C0 = internal global i1 false
@fpu_stat_C1 = internal global i1 false
@fpu_stat_C2 = internal global i1 false
@fpu_stat_C3 = internal global i1 false
@fpu_stat_TOP = internal global i3 0
@fpu_stat_B = internal global i1 false
@fpu_control_IM = internal global i1 false
@fpu_control_DM = internal global i1 false
@fpu_control_ZM = internal global i1 false
@fpu_control_OM = internal global i1 false
@fpu_control_UM = internal global i1 false
@fpu_control_PM = internal global i1 false
@fpu_control_PC = internal global i2 0
@fpu_control_RC = internal global i2 0
@fpu_control_X = internal global i1 false
@fp0 = internal global double 0.000000e+00
@fp1 = internal global double 0.000000e+00
@fp2 = internal global double 0.000000e+00
@fp3 = internal global double 0.000000e+00
@fp4 = internal global double 0.000000e+00
@fp5 = internal global double 0.000000e+00
@fp6 = internal global double 0.000000e+00
@fp7 = internal global double 0.000000e+00
@k0 = internal global i64 0
@k1 = internal global i64 0
@k2 = internal global i64 0
@k3 = internal global i64 0
@k4 = internal global i64 0
@k5 = internal global i64 0
@k6 = internal global i64 0
@k7 = internal global i64 0
@mm0 = internal global i64 0
@mm1 = internal global i64 0
@mm2 = internal global i64 0
@mm3 = internal global i64 0
@mm4 = internal global i64 0
@mm5 = internal global i64 0
@mm6 = internal global i64 0
@mm7 = internal global i64 0
@xmm0 = internal global i128 0
@xmm1 = internal global i128 0
@xmm2 = internal global i128 0
@xmm3 = internal global i128 0
@xmm4 = internal global i128 0
@xmm5 = internal global i128 0
@xmm6 = internal global i128 0
@xmm7 = internal global i128 0
@xmm8 = internal global i128 0
@xmm9 = internal global i128 0
@xmm10 = internal global i128 0
@xmm11 = internal global i128 0
@xmm12 = internal global i128 0
@xmm13 = internal global i128 0
@xmm14 = internal global i128 0
@xmm15 = internal global i128 0
@xmm16 = internal global i128 0
@xmm17 = internal global i128 0
@xmm18 = internal global i128 0
@xmm19 = internal global i128 0
@xmm20 = internal global i128 0
@xmm21 = internal global i128 0
@xmm22 = internal global i128 0
@xmm23 = internal global i128 0
@xmm24 = internal global i128 0
@xmm25 = internal global i128 0
@xmm26 = internal global i128 0
@xmm27 = internal global i128 0
@xmm28 = internal global i128 0
@xmm29 = internal global i128 0
@xmm30 = internal global i128 0
@xmm31 = internal global i128 0
@ymm0 = internal global i256 0
@ymm1 = internal global i256 0
@ymm2 = internal global i256 0
@ymm3 = internal global i256 0
@ymm4 = internal global i256 0
@ymm5 = internal global i256 0
@ymm6 = internal global i256 0
@ymm7 = internal global i256 0
@ymm8 = internal global i256 0
@ymm9 = internal global i256 0
@ymm10 = internal global i256 0
@ymm11 = internal global i256 0
@ymm12 = internal global i256 0
@ymm13 = internal global i256 0
@ymm14 = internal global i256 0
@ymm15 = internal global i256 0
@ymm16 = internal global i256 0
@ymm17 = internal global i256 0
@ymm18 = internal global i256 0
@ymm19 = internal global i256 0
@ymm20 = internal global i256 0
@ymm21 = internal global i256 0
@ymm22 = internal global i256 0
@ymm23 = internal global i256 0
@ymm24 = internal global i256 0
@ymm25 = internal global i256 0
@ymm26 = internal global i256 0
@ymm27 = internal global i256 0
@ymm28 = internal global i256 0
@ymm29 = internal global i256 0
@ymm30 = internal global i256 0
@ymm31 = internal global i256 0
@zmm0 = internal global i512 0
@zmm1 = internal global i512 0
@zmm2 = internal global i512 0
@zmm3 = internal global i512 0
@zmm4 = internal global i512 0
@zmm5 = internal global i512 0
@zmm6 = internal global i512 0
@zmm7 = internal global i512 0
@zmm8 = internal global i512 0
@zmm9 = internal global i512 0
@zmm10 = internal global i512 0
@zmm11 = internal global i512 0
@zmm12 = internal global i512 0
@zmm13 = internal global i512 0
@zmm14 = internal global i512 0
@zmm15 = internal global i512 0
@zmm16 = internal global i512 0
@zmm17 = internal global i512 0
@zmm18 = internal global i512 0
@zmm19 = internal global i512 0
@zmm20 = internal global i512 0
@zmm21 = internal global i512 0
@zmm22 = internal global i512 0
@zmm23 = internal global i512 0
@zmm24 = internal global i512 0
@zmm25 = internal global i512 0
@zmm26 = internal global i512 0
@zmm27 = internal global i512 0
@zmm28 = internal global i512 0
@zmm29 = internal global i512 0
@zmm30 = internal global i512 0
@zmm31 = internal global i512 0
@dr0 = internal global i32 0
@dr1 = internal global i32 0
@dr2 = internal global i32 0
@dr3 = internal global i32 0
@dr4 = internal global i32 0
@dr5 = internal global i32 0
@dr6 = internal global i32 0
@dr7 = internal global i32 0
@dr8 = internal global i32 0
@dr9 = internal global i32 0
@dr10 = internal global i32 0
@dr11 = internal global i32 0
@dr12 = internal global i32 0
@dr13 = internal global i32 0
@dr14 = internal global i32 0
@dr15 = internal global i32 0
@cr0 = internal global i32 0
@cr1 = internal global i32 0
@cr2 = internal global i32 0
@cr3 = internal global i32 0
@cr4 = internal global i32 0
@cr5 = internal global i32 0
@cr6 = internal global i32 0
@cr7 = internal global i32 0
@cr8 = internal global i32 0
@cr9 = internal global i32 0
@cr10 = internal global i32 0
@cr11 = internal global i32 0
@cr12 = internal global i32 0
@cr13 = internal global i32 0
@cr14 = internal global i32 0
@cr15 = internal global i32 0
@fpsw = internal global i32 0
@eax = internal global i32 0
@ecx = internal global i32 0
@edx = internal global i32 0
@ebx = internal global i32 0
@esp = internal global i32 0
@ebp = internal global i32 0
@esi = internal global i32 0
@edi = internal global i32 0
@eip = internal global i32 0
@eiz = internal global i32 0

define i32 @sub_36f7(i32, i32, i32, i32) {
entry:
  store volatile i64 4194304, i64* @0
  %4 = load i32, i32* @ebp
  %5 = load i32, i32* @esp
  %6 = sub i32 %5, 4
  %7 = inttoptr i32 %6 to i32*
  store i32 %4, i32* %7
  store i32 %6, i32* @esp
  store volatile i64 4194305, i64* @0
  %8 = load i32, i32* @esp
  store i32 %8, i32* @ebp
  store volatile i64 4194307, i64* @0
  %9 = load i32, i32* @esp
  %10 = sub i32 %9, 16
  %11 = and i32 %9, 15
  %12 = sub i32 %11, 0
  %13 = icmp ugt i32 %12, 15
  %14 = icmp ult i32 %9, 16
  %15 = xor i32 %9, 16
  %16 = xor i32 %9, %10
  %17 = and i32 %15, %16
  %18 = icmp slt i32 %17, 0
  store i1 %13, i1* @az
  store i1 %14, i1* @cf
  store i1 %18, i1* @of
  %19 = icmp eq i32 %10, 0
  store i1 %19, i1* @zf
  %20 = icmp slt i32 %10, 0
  store i1 %20, i1* @sf
  %21 = trunc i32 %10 to i8
  %22 = call i8 @llvm.ctpop.i8(i8 %21)
  %23 = and i8 %22, 1
  %24 = icmp eq i8 %23, 0
  store i1 %24, i1* @pf
  store i32 %10, i32* @esp
  store volatile i64 4194310, i64* @0
  %25 = load i32, i32* @esi
  %26 = load i32, i32* @esp
  %27 = sub i32 %26, 4
  %28 = inttoptr i32 %27 to i32*
  store i32 %25, i32* %28
  store i32 %27, i32* @esp
  store volatile i64 4194311, i64* @0
  %29 = load i32, i32* @esi
  %30 = load i32, i32* @esi
  %31 = xor i32 %29, %30
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %32 = icmp eq i32 %31, 0
  store i1 %32, i1* @zf
  %33 = icmp slt i32 %31, 0
  store i1 %33, i1* @sf
  %34 = trunc i32 %31 to i8
  %35 = call i8 @llvm.ctpop.i8(i8 %34)
  %36 = and i8 %35, 1
  %37 = icmp eq i8 %36, 0
  store i1 %37, i1* @pf
  store i32 %31, i32* @esi
  store volatile i64 4194313, i64* @0
  %38 = load i32, i32* @esi
  %39 = load i32, i32* @esp
  %40 = sub i32 %39, 4
  %41 = inttoptr i32 %40 to i32*
  store i32 %38, i32* %41
  store i32 %40, i32* @esp
  store volatile i64 4194314, i64* @0
  %42 = load i32, i32* @ebp
  %43 = add i32 %42, 24
  %44 = inttoptr i32 %43 to i32*
  %45 = load i32, i32* %44
  %46 = load i32, i32* @esp
  %47 = sub i32 %46, 4
  %48 = inttoptr i32 %47 to i32*
  store i32 %45, i32* %48
  store i32 %47, i32* @esp
  store volatile i64 4194317, i64* @0
  %49 = load i32, i32* @ebp
  %50 = add i32 %49, 20
  %51 = inttoptr i32 %50 to i32*
  %52 = load i32, i32* %51
  %53 = load i32, i32* @esp
  %54 = sub i32 %53, 4
  %55 = inttoptr i32 %54 to i32*
  store i32 %52, i32* %55
  store i32 %54, i32* @esp
  store volatile i64 4194320, i64* @0
  %56 = load i32, i32* @esi
  %57 = load i32, i32* @esp
  %58 = sub i32 %57, 4
  %59 = inttoptr i32 %58 to i32*
  store i32 %56, i32* %59
  store i32 %58, i32* @esp
  store volatile i64 4194321, i64* @0
  %60 = load i32, i32* @ebp
  %61 = add i32 %60, 12
  %62 = inttoptr i32 %61 to i32*
  %63 = load i32, i32* %62
  %64 = load i32, i32* @esp
  %65 = sub i32 %64, 4
  %66 = inttoptr i32 %65 to i32*
  store i32 %63, i32* %66
  store i32 %65, i32* @esp
  store volatile i64 4194324, i64* @0
  %67 = load i32, i32* @ebp
  %68 = add i32 %67, 8
  %69 = inttoptr i32 %68 to i32*
  %70 = load i32, i32* %69
  %71 = load i32, i32* @esp
  %72 = sub i32 %71, 4
  %73 = inttoptr i32 %72 to i32*
  store i32 %70, i32* %73
  store i32 %72, i32* @esp
  store volatile i64 4194327, i64* @0
  %74 = load i32, i32* @esi
  %75 = load i32, i32* @esp
  %76 = sub i32 %75, 4
  %77 = inttoptr i32 %76 to i32*
  store i32 %74, i32* %77
  store i32 %76, i32* @esp
  store volatile i64 4194328, i64* @0
  %78 = load i32, i32* @esi
  %79 = load i32, i32* @esp
  %80 = sub i32 %79, 4
  %81 = inttoptr i32 %80 to i32*
  store i32 %78, i32* %81
  store i32 %80, i32* @esp
  store volatile i64 4194329, i64* @0
  %82 = load i32, i32* @esp
  %83 = sub i32 %82, 4
  %84 = inttoptr i32 %83 to i32*
  store i32 4194334, i32* %84
  store i32 %83, i32* @esp
  call void @1(i32 4317740)
  store volatile i64 4194334, i64* @0
  %85 = load i32, i32* @ebp
  %86 = add i32 %85, -16
  %87 = inttoptr i32 %86 to i32*
  store i32 15246578, i32* %87
  store volatile i64 4194341, i64* @0
  %88 = load i32, i32* @esp
  %89 = add i32 %88, 32
  %90 = and i32 %88, 15
  %91 = add i32 %90, 0
  %92 = icmp ugt i32 %91, 15
  %93 = icmp ult i32 %89, %88
  %94 = xor i32 %88, %89
  %95 = xor i32 32, %89
  %96 = and i32 %94, %95
  %97 = icmp slt i32 %96, 0
  store i1 %92, i1* @az
  store i1 %93, i1* @cf
  store i1 %97, i1* @of
  %98 = icmp eq i32 %89, 0
  store i1 %98, i1* @zf
  %99 = icmp slt i32 %89, 0
  store i1 %99, i1* @sf
  %100 = trunc i32 %89 to i8
  %101 = call i8 @llvm.ctpop.i8(i8 %100)
  %102 = and i8 %101, 1
  %103 = icmp eq i8 %102, 0
  store i1 %103, i1* @pf
  store i32 %89, i32* @esp
  store volatile i64 4194344, i64* @0
  %104 = load i32, i32* @ebp
  %105 = add i32 %104, -16
  %106 = inttoptr i32 %105 to i32*
  %107 = load i32, i32* %106
  %108 = xor i32 %107, 157808766
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %109 = icmp eq i32 %108, 0
  store i1 %109, i1* @zf
  %110 = icmp slt i32 %108, 0
  store i1 %110, i1* @sf
  %111 = trunc i32 %108 to i8
  %112 = call i8 @llvm.ctpop.i8(i8 %111)
  %113 = and i8 %112, 1
  %114 = icmp eq i8 %113, 0
  store i1 %114, i1* @pf
  %115 = load i32, i32* @ebp
  %116 = add i32 %115, -16
  %117 = inttoptr i32 %116 to i32*
  store i32 %108, i32* %117
  store volatile i64 4194351, i64* @0
  %118 = load i32, i32* @edx
  %119 = load i32, i32* @edx
  %120 = xor i32 %118, %119
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %121 = icmp eq i32 %120, 0
  store i1 %121, i1* @zf
  %122 = icmp slt i32 %120, 0
  store i1 %122, i1* @sf
  %123 = trunc i32 %120 to i8
  %124 = call i8 @llvm.ctpop.i8(i8 %123)
  %125 = and i8 %124, 1
  %126 = icmp eq i8 %125, 0
  store i1 %126, i1* @pf
  store i32 %120, i32* @edx
  store volatile i64 4194353, i64* @0
  %127 = load i32, i32* @ebp
  %128 = add i32 %127, -16
  %129 = inttoptr i32 %128 to i32*
  %130 = load i32, i32* %129
  %131 = xor i32 %130, 159923685
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %132 = icmp eq i32 %131, 0
  store i1 %132, i1* @zf
  %133 = icmp slt i32 %131, 0
  store i1 %133, i1* @sf
  %134 = trunc i32 %131 to i8
  %135 = call i8 @llvm.ctpop.i8(i8 %134)
  %136 = and i8 %135, 1
  %137 = icmp eq i8 %136, 0
  store i1 %137, i1* @pf
  %138 = load i32, i32* @ebp
  %139 = add i32 %138, -16
  %140 = inttoptr i32 %139 to i32*
  store i32 %131, i32* %140
  store volatile i64 4194360, i64* @0
  %141 = load i32, i32* @ebp
  %142 = add i32 %141, -12
  %143 = inttoptr i32 %142 to i32*
  store i32 16386218, i32* %143
  store volatile i64 4194367, i64* @0
  %144 = load i32, i32* @ebp
  %145 = add i32 %144, -12
  %146 = inttoptr i32 %145 to i32*
  %147 = load i32, i32* %146
  %148 = load i1, i1* @of
  %149 = shl i32 %147, 6
  %150 = icmp eq i32 %149, 0
  store i1 %150, i1* @zf
  %151 = icmp slt i32 %149, 0
  store i1 %151, i1* @sf
  %152 = trunc i32 %149 to i8
  %153 = call i8 @llvm.ctpop.i8(i8 %152)
  %154 = and i8 %153, 1
  %155 = icmp eq i8 %154, 0
  store i1 %155, i1* @pf
  %156 = load i32, i32* @ebp
  %157 = add i32 %156, -12
  %158 = inttoptr i32 %157 to i32*
  store i32 %149, i32* %158
  %159 = shl i32 %147, 5
  %160 = lshr i32 %159, 31
  %161 = trunc i32 %160 to i1
  store i1 %161, i1* @cf
  %162 = lshr i32 %149, 31
  %163 = icmp ne i32 %162, %160
  %164 = select i1 false, i1 %163, i1 %148
  store i1 %164, i1* @of
  store volatile i64 4194371, i64* @0
  %165 = load i32, i32* @ebp
  %166 = add i32 %165, -12
  %167 = inttoptr i32 %166 to i32*
  %168 = load i32, i32* %167
  %169 = xor i32 %168, 1048703726
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %170 = icmp eq i32 %169, 0
  store i1 %170, i1* @zf
  %171 = icmp slt i32 %169, 0
  store i1 %171, i1* @sf
  %172 = trunc i32 %169 to i8
  %173 = call i8 @llvm.ctpop.i8(i8 %172)
  %174 = and i8 %173, 1
  %175 = icmp eq i8 %174, 0
  store i1 %175, i1* @pf
  %176 = load i32, i32* @ebp
  %177 = add i32 %176, -12
  %178 = inttoptr i32 %177 to i32*
  store i32 %169, i32* %178
  store volatile i64 4194378, i64* @0
  %179 = load i32, i32* @ebp
  %180 = add i32 %179, -8
  %181 = inttoptr i32 %180 to i32*
  store i32 229867, i32* %181
  store volatile i64 4194385, i64* @0
  %182 = load i32, i32* @ebp
  %183 = add i32 %182, -8
  %184 = inttoptr i32 %183 to i32*
  %185 = load i32, i32* %184
  %186 = add i32 %185, 7838
  %187 = and i32 %185, 15
  %188 = add i32 %187, 14
  %189 = icmp ugt i32 %188, 15
  %190 = icmp ult i32 %186, %185
  %191 = xor i32 %185, %186
  %192 = xor i32 7838, %186
  %193 = and i32 %191, %192
  %194 = icmp slt i32 %193, 0
  store i1 %189, i1* @az
  store i1 %190, i1* @cf
  store i1 %194, i1* @of
  %195 = icmp eq i32 %186, 0
  store i1 %195, i1* @zf
  %196 = icmp slt i32 %186, 0
  store i1 %196, i1* @sf
  %197 = trunc i32 %186 to i8
  %198 = call i8 @llvm.ctpop.i8(i8 %197)
  %199 = and i8 %198, 1
  %200 = icmp eq i8 %199, 0
  store i1 %200, i1* @pf
  %201 = load i32, i32* @ebp
  %202 = add i32 %201, -8
  %203 = inttoptr i32 %202 to i32*
  store i32 %186, i32* %203
  store volatile i64 4194392, i64* @0
  %204 = load i32, i32* @ebp
  %205 = add i32 %204, -8
  %206 = inttoptr i32 %205 to i32*
  %207 = load i32, i32* %206
  %208 = xor i32 %207, 985971
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %209 = icmp eq i32 %208, 0
  store i1 %209, i1* @zf
  %210 = icmp slt i32 %208, 0
  store i1 %210, i1* @sf
  %211 = trunc i32 %208 to i8
  %212 = call i8 @llvm.ctpop.i8(i8 %211)
  %213 = and i8 %212, 1
  %214 = icmp eq i8 %213, 0
  store i1 %214, i1* @pf
  %215 = load i32, i32* @ebp
  %216 = add i32 %215, -8
  %217 = inttoptr i32 %216 to i32*
  store i32 %208, i32* %217
  store volatile i64 4194399, i64* @0
  %218 = load i32, i32* @ebp
  %219 = add i32 %218, -4
  %220 = inttoptr i32 %219 to i32*
  store i32 11850407, i32* %220
  store volatile i64 4194406, i64* @0
  %221 = load i32, i32* @ebp
  %222 = add i32 %221, -4
  %223 = inttoptr i32 %222 to i32*
  %224 = load i32, i32* %223
  store i32 %224, i32* @eax
  store volatile i64 4194409, i64* @0
  %225 = load i32, i32* @esp
  %226 = sub i32 %225, 4
  %227 = inttoptr i32 %226 to i32*
  store i32 80, i32* %227
  store i32 %226, i32* @esp
  store volatile i64 4194411, i64* @0
  %228 = load i32, i32* @esp
  %229 = inttoptr i32 %228 to i32*
  %230 = load i32, i32* %229
  store i32 %230, i32* @ecx
  %231 = add i32 %228, 4
  store i32 %231, i32* @esp
  store volatile i64 4194412, i64* @0
  %232 = load i32, i32* @ecx
  %233 = load i32, i32* @eax
  %234 = zext i32 %233 to i64
  %235 = load i32, i32* @edx
  %236 = zext i32 %235 to i64
  %237 = shl i64 %236, 32
  %238 = or i64 %237, %234
  %239 = zext i32 %232 to i64
  %240 = udiv i64 %238, %239
  %241 = trunc i64 %240 to i32
  store i32 %241, i32* @eax
  %242 = urem i64 %238, %239
  %243 = trunc i64 %242 to i32
  store i32 %243, i32* @edx
  store volatile i64 4194414, i64* @0
  %244 = load i32, i32* @esp
  %245 = sub i32 %244, 4
  %246 = inttoptr i32 %245 to i32*
  store i32 -1668266032, i32* %246
  store i32 %245, i32* @esp
  store volatile i64 4194419, i64* @0
  %247 = load i32, i32* @eax
  %248 = load i32, i32* @ebp
  %249 = add i32 %248, -4
  %250 = inttoptr i32 %249 to i32*
  store i32 %247, i32* %250
  store volatile i64 4194422, i64* @0
  %251 = load i32, i32* @ebp
  %252 = add i32 %251, -4
  %253 = inttoptr i32 %252 to i32*
  %254 = load i32, i32* %253
  %255 = load i1, i1* @of
  %256 = lshr i32 %254, 12
  %257 = icmp eq i32 %256, 0
  store i1 %257, i1* @zf
  %258 = icmp slt i32 %256, 0
  store i1 %258, i1* @sf
  %259 = trunc i32 %256 to i8
  %260 = call i8 @llvm.ctpop.i8(i8 %259)
  %261 = and i8 %260, 1
  %262 = icmp eq i8 %261, 0
  store i1 %262, i1* @pf
  %263 = load i32, i32* @ebp
  %264 = add i32 %263, -4
  %265 = inttoptr i32 %264 to i32*
  store i32 %256, i32* %265
  %266 = and i32 2048, %254
  %267 = icmp ne i32 %266, 0
  store i1 %267, i1* @cf
  %268 = icmp slt i32 %254, 0
  %269 = select i1 false, i1 %268, i1 %255
  store i1 %269, i1* @of
  store volatile i64 4194426, i64* @0
  %270 = load i32, i32* @ebp
  %271 = add i32 %270, -4
  %272 = inttoptr i32 %271 to i32*
  %273 = load i32, i32* %272
  %274 = xor i32 %273, 508039
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %275 = icmp eq i32 %274, 0
  store i1 %275, i1* @zf
  %276 = icmp slt i32 %274, 0
  store i1 %276, i1* @sf
  %277 = trunc i32 %274 to i8
  %278 = call i8 @llvm.ctpop.i8(i8 %277)
  %279 = and i8 %278, 1
  %280 = icmp eq i8 %279, 0
  store i1 %280, i1* @pf
  %281 = load i32, i32* @ebp
  %282 = add i32 %281, -4
  %283 = inttoptr i32 %282 to i32*
  store i32 %274, i32* %283
  store volatile i64 4194433, i64* @0
  %284 = load i32, i32* @ebp
  %285 = add i32 %284, -4
  %286 = inttoptr i32 %285 to i32*
  %287 = load i32, i32* %286
  store i32 %287, i32* @eax
  store volatile i64 4194436, i64* @0
  %288 = load i32, i32* @ebp
  %289 = add i32 %288, -8
  %290 = inttoptr i32 %289 to i32*
  %291 = load i32, i32* %290
  store i32 %291, i32* @eax
  store volatile i64 4194439, i64* @0
  %292 = load i32, i32* @ebp
  %293 = add i32 %292, -12
  %294 = inttoptr i32 %293 to i32*
  %295 = load i32, i32* %294
  store i32 %295, i32* @eax
  store volatile i64 4194442, i64* @0
  %296 = load i32, i32* @ebp
  %297 = add i32 %296, -16
  %298 = inttoptr i32 %297 to i32*
  %299 = load i32, i32* %298
  store i32 %299, i32* @eax
  store volatile i64 4194445, i64* @0
  %300 = load i32, i32* @ecx
  %301 = load i32, i32* @esp
  %302 = sub i32 %301, 4
  %303 = inttoptr i32 %302 to i32*
  store i32 %300, i32* %303
  store i32 %302, i32* @esp
  store volatile i64 4194446, i64* @0
  %304 = load i32, i32* @esp
  %305 = sub i32 %304, 4
  %306 = inttoptr i32 %305 to i32*
  store i32 1989985150, i32* %306
  store i32 %305, i32* @esp
  store volatile i64 4194451, i64* @0
  %307 = load i32, i32* @ecx
  %308 = load i32, i32* @esp
  %309 = sub i32 %308, 4
  %310 = inttoptr i32 %309 to i32*
  store i32 %307, i32* %310
  store i32 %309, i32* @esp
  store volatile i64 4194452, i64* @0
  %311 = load i32, i32* @ecx
  %312 = load i32, i32* @esp
  %313 = sub i32 %312, 4
  %314 = inttoptr i32 %313 to i32*
  store i32 %311, i32* %314
  store i32 %313, i32* @esp
  store volatile i64 4194453, i64* @0
  %315 = load i32, i32* @esp
  %316 = sub i32 %315, 4
  %317 = inttoptr i32 %316 to i32*
  store i32 99, i32* %317
  store i32 %316, i32* @esp
  store volatile i64 4194455, i64* @0
  %318 = load i32, i32* @esp
  %319 = inttoptr i32 %318 to i32*
  %320 = load i32, i32* %319
  store i32 %320, i32* @ecx
  %321 = add i32 %318, 4
  store i32 %321, i32* @esp
  store volatile i64 4194456, i64* @0
  %322 = load i32, i32* @esp
  %323 = sub i32 %322, 4
  %324 = inttoptr i32 %323 to i32*
  store i32 4194461, i32* %324
  store i32 %323, i32* @esp
  call void @1(i32 4186130)
  store volatile i64 4194461, i64* @0
  %325 = load i32, i32* @esp
  %326 = add i32 %325, 20
  %327 = and i32 %325, 15
  %328 = add i32 %327, 4
  %329 = icmp ugt i32 %328, 15
  %330 = icmp ult i32 %326, %325
  %331 = xor i32 %325, %326
  %332 = xor i32 20, %326
  %333 = and i32 %331, %332
  %334 = icmp slt i32 %333, 0
  store i1 %329, i1* @az
  store i1 %330, i1* @cf
  store i1 %334, i1* @of
  %335 = icmp eq i32 %326, 0
  store i1 %335, i1* @zf
  %336 = icmp slt i32 %326, 0
  store i1 %336, i1* @sf
  %337 = trunc i32 %326 to i8
  %338 = call i8 @llvm.ctpop.i8(i8 %337)
  %339 = and i8 %338, 1
  %340 = icmp eq i8 %339, 0
  store i1 %340, i1* @pf
  store i32 %326, i32* @esp
  store volatile i64 4194464, i64* @0
  %341 = load i32, i32* @esi
  %342 = load i32, i32* @esp
  %343 = sub i32 %342, 4
  %344 = inttoptr i32 %343 to i32*
  store i32 %341, i32* %344
  store i32 %343, i32* @esp
  store volatile i64 4194465, i64* @0
  %345 = load i32, i32* @esi
  %346 = load i32, i32* @esp
  %347 = sub i32 %346, 4
  %348 = inttoptr i32 %347 to i32*
  store i32 %345, i32* %348
  store i32 %347, i32* @esp
  store volatile i64 4194466, i64* @0
  %349 = load i32, i32* @esi
  %350 = load i32, i32* @esp
  %351 = sub i32 %350, 4
  %352 = inttoptr i32 %351 to i32*
  store i32 %349, i32* %352
  store i32 %351, i32* @esp
  store volatile i64 4194467, i64* @0
  %353 = load i32, i32* @esi
  %354 = load i32, i32* @esp
  %355 = sub i32 %354, 4
  %356 = inttoptr i32 %355 to i32*
  store i32 %353, i32* %356
  store i32 %355, i32* @esp
  store volatile i64 4194468, i64* @0
  %357 = load i32, i32* @esp
  %358 = sub i32 %357, 4
  %359 = inttoptr i32 %358 to i32*
  store i32 4194470, i32* %359
  store i32 %358, i32* @esp
  %360 = load i32, i32* @eax
  call void @1(i32 %360)
  store volatile i64 4194470, i64* @0
  %361 = load i32, i32* @esp
  %362 = inttoptr i32 %361 to i32*
  %363 = load i32, i32* %362
  store i32 %363, i32* @esi
  %364 = add i32 %361, 4
  store i32 %364, i32* @esp
  store volatile i64 4194471, i64* @0
  %365 = load i32, i32* @ebp
  store i32 %365, i32* @esp
  store volatile i64 4194473, i64* @0
  %366 = load i32, i32* @esp
  %367 = inttoptr i32 %366 to i32*
  %368 = load i32, i32* %367
  store i32 %368, i32* @ebp
  %369 = add i32 %366, 4
  store i32 %369, i32* @esp
  store volatile i64 4194474, i64* @0
  %370 = load i32, i32* @esp
  %371 = inttoptr i32 %370 to i32*
  %372 = load i32, i32* %371
  %373 = add i32 %370, 4
  store i32 %373, i32* @esp
  call void @2(i32 %372)
}

declare void @1(i32)

declare void @2(i32)

declare void @3(i32)

declare void @4(i1, i32)

declare void @5(i3, x86_fp80)

declare x86_fp80 @6(i3)

; Function Attrs: nounwind readnone speculatable
declare i8 @llvm.ctpop.i8(i8) #0

attributes #0 = { nounwind readnone speculatable }
