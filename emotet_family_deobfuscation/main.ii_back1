;
;
;	生成时间2022.9.10
;
;
;


; ModuleID = 'emotet'
source_filename = "emotet"
target datalayout = "e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

@0 = internal global i64 0
@cf = internal global i1 false
@pf = internal global i1 false
@az = internal global i1 false
@zf = internal global i1 false
@sf = internal global i1 false
@tf = internal global i1 false
@if = internal global i1 false
@df = internal global i1 false
@of = internal global i1 false
@iopl = internal global i2 0
@nt = internal global i1 false
@rf = internal global i1 false
@vm = internal global i1 false
@ac = internal global i1 false
@vif = internal global i1 false
@vip = internal global i1 false
@id = internal global i1 false
@eflags = internal global i32 0
@ss = internal global i16 0
@cs = internal global i16 0
@ds = internal global i16 0
@es = internal global i16 0
@fs = internal global i16 0
@gs = internal global i16 0
@st0 = internal global x86_fp80 0xK00000000000000000000
@st1 = internal global x86_fp80 0xK00000000000000000000
@st2 = internal global x86_fp80 0xK00000000000000000000
@st3 = internal global x86_fp80 0xK00000000000000000000
@st4 = internal global x86_fp80 0xK00000000000000000000
@st5 = internal global x86_fp80 0xK00000000000000000000
@st6 = internal global x86_fp80 0xK00000000000000000000
@st7 = internal global x86_fp80 0xK00000000000000000000
@fpu_stat_IE = internal global i1 false
@fpu_stat_DE = internal global i1 false
@fpu_stat_ZE = internal global i1 false
@fpu_stat_OE = internal global i1 false
@fpu_stat_UE = internal global i1 false
@fpu_stat_PE = internal global i1 false
@fpu_stat_SF = internal global i1 false
@fpu_stat_ES = internal global i1 false
@fpu_stat_C0 = internal global i1 false
@fpu_stat_C1 = internal global i1 false
@fpu_stat_C2 = internal global i1 false
@fpu_stat_C3 = internal global i1 false
@fpu_stat_TOP = internal global i3 0
@fpu_stat_B = internal global i1 false
@fpu_control_IM = internal global i1 false
@fpu_control_DM = internal global i1 false
@fpu_control_ZM = internal global i1 false
@fpu_control_OM = internal global i1 false
@fpu_control_UM = internal global i1 false
@fpu_control_PM = internal global i1 false
@fpu_control_PC = internal global i2 0
@fpu_control_RC = internal global i2 0
@fpu_control_X = internal global i1 false
@fp0 = internal global double 0.000000e+00
@fp1 = internal global double 0.000000e+00
@fp2 = internal global double 0.000000e+00
@fp3 = internal global double 0.000000e+00
@fp4 = internal global double 0.000000e+00
@fp5 = internal global double 0.000000e+00
@fp6 = internal global double 0.000000e+00
@fp7 = internal global double 0.000000e+00
@k0 = internal global i64 0
@k1 = internal global i64 0
@k2 = internal global i64 0
@k3 = internal global i64 0
@k4 = internal global i64 0
@k5 = internal global i64 0
@k6 = internal global i64 0
@k7 = internal global i64 0
@mm0 = internal global i64 0
@mm1 = internal global i64 0
@mm2 = internal global i64 0
@mm3 = internal global i64 0
@mm4 = internal global i64 0
@mm5 = internal global i64 0
@mm6 = internal global i64 0
@mm7 = internal global i64 0
@xmm0 = internal global i128 0
@xmm1 = internal global i128 0
@xmm2 = internal global i128 0
@xmm3 = internal global i128 0
@xmm4 = internal global i128 0
@xmm5 = internal global i128 0
@xmm6 = internal global i128 0
@xmm7 = internal global i128 0
@xmm8 = internal global i128 0
@xmm9 = internal global i128 0
@xmm10 = internal global i128 0
@xmm11 = internal global i128 0
@xmm12 = internal global i128 0
@xmm13 = internal global i128 0
@xmm14 = internal global i128 0
@xmm15 = internal global i128 0
@xmm16 = internal global i128 0
@xmm17 = internal global i128 0
@xmm18 = internal global i128 0
@xmm19 = internal global i128 0
@xmm20 = internal global i128 0
@xmm21 = internal global i128 0
@xmm22 = internal global i128 0
@xmm23 = internal global i128 0
@xmm24 = internal global i128 0
@xmm25 = internal global i128 0
@xmm26 = internal global i128 0
@xmm27 = internal global i128 0
@xmm28 = internal global i128 0
@xmm29 = internal global i128 0
@xmm30 = internal global i128 0
@xmm31 = internal global i128 0
@ymm0 = internal global i256 0
@ymm1 = internal global i256 0
@ymm2 = internal global i256 0
@ymm3 = internal global i256 0
@ymm4 = internal global i256 0
@ymm5 = internal global i256 0
@ymm6 = internal global i256 0
@ymm7 = internal global i256 0
@ymm8 = internal global i256 0
@ymm9 = internal global i256 0
@ymm10 = internal global i256 0
@ymm11 = internal global i256 0
@ymm12 = internal global i256 0
@ymm13 = internal global i256 0
@ymm14 = internal global i256 0
@ymm15 = internal global i256 0
@ymm16 = internal global i256 0
@ymm17 = internal global i256 0
@ymm18 = internal global i256 0
@ymm19 = internal global i256 0
@ymm20 = internal global i256 0
@ymm21 = internal global i256 0
@ymm22 = internal global i256 0
@ymm23 = internal global i256 0
@ymm24 = internal global i256 0
@ymm25 = internal global i256 0
@ymm26 = internal global i256 0
@ymm27 = internal global i256 0
@ymm28 = internal global i256 0
@ymm29 = internal global i256 0
@ymm30 = internal global i256 0
@ymm31 = internal global i256 0
@zmm0 = internal global i512 0
@zmm1 = internal global i512 0
@zmm2 = internal global i512 0
@zmm3 = internal global i512 0
@zmm4 = internal global i512 0
@zmm5 = internal global i512 0
@zmm6 = internal global i512 0
@zmm7 = internal global i512 0
@zmm8 = internal global i512 0
@zmm9 = internal global i512 0
@zmm10 = internal global i512 0
@zmm11 = internal global i512 0
@zmm12 = internal global i512 0
@zmm13 = internal global i512 0
@zmm14 = internal global i512 0
@zmm15 = internal global i512 0
@zmm16 = internal global i512 0
@zmm17 = internal global i512 0
@zmm18 = internal global i512 0
@zmm19 = internal global i512 0
@zmm20 = internal global i512 0
@zmm21 = internal global i512 0
@zmm22 = internal global i512 0
@zmm23 = internal global i512 0
@zmm24 = internal global i512 0
@zmm25 = internal global i512 0
@zmm26 = internal global i512 0
@zmm27 = internal global i512 0
@zmm28 = internal global i512 0
@zmm29 = internal global i512 0
@zmm30 = internal global i512 0
@zmm31 = internal global i512 0
@dr0 = internal global i32 0
@dr1 = internal global i32 0
@dr2 = internal global i32 0
@dr3 = internal global i32 0
@dr4 = internal global i32 0
@dr5 = internal global i32 0
@dr6 = internal global i32 0
@dr7 = internal global i32 0
@dr8 = internal global i32 0
@dr9 = internal global i32 0
@dr10 = internal global i32 0
@dr11 = internal global i32 0
@dr12 = internal global i32 0
@dr13 = internal global i32 0
@dr14 = internal global i32 0
@dr15 = internal global i32 0
@cr0 = internal global i32 0
@cr1 = internal global i32 0
@cr2 = internal global i32 0
@cr3 = internal global i32 0
@cr4 = internal global i32 0
@cr5 = internal global i32 0
@cr6 = internal global i32 0
@cr7 = internal global i32 0
@cr8 = internal global i32 0
@cr9 = internal global i32 0
@cr10 = internal global i32 0
@cr11 = internal global i32 0
@cr12 = internal global i32 0
@cr13 = internal global i32 0
@cr14 = internal global i32 0
@cr15 = internal global i32 0
@fpsw = internal global i32 0
@eax = internal global i32 0
@ecx = internal global i32 0
@edx = internal global i32 0
@ebx = internal global i32 0
@esp = internal global i32 0
@ebp = internal global i32 0
@esi = internal global i32 0
@edi = internal global i32 0
@eip = internal global i32 0
@eiz = internal global i32 0

define void @sub_36f7() {
entry:
  store volatile i64 14071, i64* @0			;全局变量0 赋值0x36f7
  %0 = load i32, i32* @ebp					;读取全局变量ebp的值
  %1 = load i32, i32* @esp					;读取全局变量esp的值
  %2 = sub i32 %1, 4						;%2 = esp-4
  %3 = inttoptr i32 %2 to i32*				;lea %3,esp - 4 
  store i32 %0, i32* %3						;mov [esp-4],0
  store i32 %2, i32* @esp
  store volatile i64 14072, i64* @0
  %4 = load i32, i32* @esp
  store i32 %4, i32* @ebp
  store volatile i64 14074, i64* @0
  %5 = load i32, i32* @esp
  %6 = sub i32 %5, 16
  %7 = and i32 %5, 15
  %8 = sub i32 %7, 0
  %9 = icmp ugt i32 %8, 15
  %10 = icmp ult i32 %5, 16
  %11 = xor i32 %5, 16
  %12 = xor i32 %5, %6
  %13 = and i32 %11, %12
  %14 = icmp slt i32 %13, 0
  store i1 %9, i1* @az
  store i1 %10, i1* @cf
  store i1 %14, i1* @of
  %15 = icmp eq i32 %6, 0
  store i1 %15, i1* @zf
  %16 = icmp slt i32 %6, 0
  store i1 %16, i1* @sf
  %17 = trunc i32 %6 to i8
  %18 = call i8 @llvm.ctpop.i8(i8 %17)
  %19 = and i8 %18, 1
  %20 = icmp eq i8 %19, 0
  store i1 %20, i1* @pf
  store i32 %6, i32* @esp
  store volatile i64 14077, i64* @0
  %21 = load i32, i32* @esi
  %22 = load i32, i32* @esp
  %23 = sub i32 %22, 4
  %24 = inttoptr i32 %23 to i32*
  store i32 %21, i32* %24
  store i32 %23, i32* @esp
  store volatile i64 14078, i64* @0
  %25 = load i32, i32* @esi
  %26 = load i32, i32* @esi
  %27 = xor i32 %25, %26
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %28 = icmp eq i32 %27, 0
  store i1 %28, i1* @zf
  %29 = icmp slt i32 %27, 0
  store i1 %29, i1* @sf
  %30 = trunc i32 %27 to i8
  %31 = call i8 @llvm.ctpop.i8(i8 %30)
  %32 = and i8 %31, 1
  %33 = icmp eq i8 %32, 0
  store i1 %33, i1* @pf
  store i32 %27, i32* @esi
  store volatile i64 14080, i64* @0
  %34 = load i32, i32* @esi
  %35 = load i32, i32* @esp
  %36 = sub i32 %35, 4
  %37 = inttoptr i32 %36 to i32*
  store i32 %34, i32* %37
  store i32 %36, i32* @esp
  store volatile i64 14081, i64* @0
  %38 = load i32, i32* @ebp
  %39 = add i32 %38, 24
  %40 = inttoptr i32 %39 to i32*
  %41 = load i32, i32* %40
  %42 = load i32, i32* @esp
  %43 = sub i32 %42, 4
  %44 = inttoptr i32 %43 to i32*
  store i32 %41, i32* %44
  store i32 %43, i32* @esp
  store volatile i64 14084, i64* @0
  %45 = load i32, i32* @ebp
  %46 = add i32 %45, 20
  %47 = inttoptr i32 %46 to i32*
  %48 = load i32, i32* %47
  %49 = load i32, i32* @esp
  %50 = sub i32 %49, 4
  %51 = inttoptr i32 %50 to i32*
  store i32 %48, i32* %51
  store i32 %50, i32* @esp
  store volatile i64 14087, i64* @0
  %52 = load i32, i32* @esi
  %53 = load i32, i32* @esp
  %54 = sub i32 %53, 4
  %55 = inttoptr i32 %54 to i32*
  store i32 %52, i32* %55
  store i32 %54, i32* @esp
  store volatile i64 14088, i64* @0
  %56 = load i32, i32* @ebp
  %57 = add i32 %56, 12
  %58 = inttoptr i32 %57 to i32*
  %59 = load i32, i32* %58
  %60 = load i32, i32* @esp
  %61 = sub i32 %60, 4
  %62 = inttoptr i32 %61 to i32*
  store i32 %59, i32* %62
  store i32 %61, i32* @esp
  store volatile i64 14091, i64* @0
  %63 = load i32, i32* @ebp
  %64 = add i32 %63, 8
  %65 = inttoptr i32 %64 to i32*
  %66 = load i32, i32* %65
  %67 = load i32, i32* @esp
  %68 = sub i32 %67, 4
  %69 = inttoptr i32 %68 to i32*
  store i32 %66, i32* %69
  store i32 %68, i32* @esp
  store volatile i64 14094, i64* @0
  %70 = load i32, i32* @esi
  %71 = load i32, i32* @esp
  %72 = sub i32 %71, 4
  %73 = inttoptr i32 %72 to i32*
  store i32 %70, i32* %73
  store i32 %72, i32* @esp
  store volatile i64 14095, i64* @0
  %74 = load i32, i32* @esi
  %75 = load i32, i32* @esp
  %76 = sub i32 %75, 4
  %77 = inttoptr i32 %76 to i32*
  store i32 %74, i32* %77
  store i32 %76, i32* @esp
  store volatile i64 14096, i64* @0
  %78 = load i32, i32* @esp
  %79 = sub i32 %78, 4
  %80 = inttoptr i32 %79 to i32*
  store i32 14101, i32* %80
  store i32 %79, i32* @esp
  call void @1(i32 137507)
  store volatile i64 14101, i64* @0
  %81 = load i32, i32* @ebp
  %82 = add i32 %81, -16
  %83 = inttoptr i32 %82 to i32*
  store i32 15246578, i32* %83
  store volatile i64 14108, i64* @0
  %84 = load i32, i32* @esp
  %85 = add i32 %84, 32
  %86 = and i32 %84, 15
  %87 = add i32 %86, 0
  %88 = icmp ugt i32 %87, 15
  %89 = icmp ult i32 %85, %84
  %90 = xor i32 %84, %85
  %91 = xor i32 32, %85
  %92 = and i32 %90, %91
  %93 = icmp slt i32 %92, 0
  store i1 %88, i1* @az
  store i1 %89, i1* @cf
  store i1 %93, i1* @of
  %94 = icmp eq i32 %85, 0
  store i1 %94, i1* @zf
  %95 = icmp slt i32 %85, 0
  store i1 %95, i1* @sf
  %96 = trunc i32 %85 to i8
  %97 = call i8 @llvm.ctpop.i8(i8 %96)
  %98 = and i8 %97, 1
  %99 = icmp eq i8 %98, 0
  store i1 %99, i1* @pf
  store i32 %85, i32* @esp
  store volatile i64 14111, i64* @0
  %100 = load i32, i32* @ebp
  %101 = add i32 %100, -16
  %102 = inttoptr i32 %101 to i32*
  %103 = load i32, i32* %102
  %104 = xor i32 %103, 157808766
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %105 = icmp eq i32 %104, 0
  store i1 %105, i1* @zf
  %106 = icmp slt i32 %104, 0
  store i1 %106, i1* @sf
  %107 = trunc i32 %104 to i8
  %108 = call i8 @llvm.ctpop.i8(i8 %107)
  %109 = and i8 %108, 1
  %110 = icmp eq i8 %109, 0
  store i1 %110, i1* @pf
  %111 = load i32, i32* @ebp
  %112 = add i32 %111, -16
  %113 = inttoptr i32 %112 to i32*
  store i32 %104, i32* %113
  store volatile i64 14118, i64* @0
  %114 = load i32, i32* @edx
  %115 = load i32, i32* @edx
  %116 = xor i32 %114, %115
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %117 = icmp eq i32 %116, 0
  store i1 %117, i1* @zf
  %118 = icmp slt i32 %116, 0
  store i1 %118, i1* @sf
  %119 = trunc i32 %116 to i8
  %120 = call i8 @llvm.ctpop.i8(i8 %119)
  %121 = and i8 %120, 1
  %122 = icmp eq i8 %121, 0
  store i1 %122, i1* @pf
  store i32 %116, i32* @edx
  store volatile i64 14120, i64* @0
  %123 = load i32, i32* @ebp
  %124 = add i32 %123, -16
  %125 = inttoptr i32 %124 to i32*
  %126 = load i32, i32* %125
  %127 = xor i32 %126, 159923685
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %128 = icmp eq i32 %127, 0
  store i1 %128, i1* @zf
  %129 = icmp slt i32 %127, 0
  store i1 %129, i1* @sf
  %130 = trunc i32 %127 to i8
  %131 = call i8 @llvm.ctpop.i8(i8 %130)
  %132 = and i8 %131, 1
  %133 = icmp eq i8 %132, 0
  store i1 %133, i1* @pf
  %134 = load i32, i32* @ebp
  %135 = add i32 %134, -16
  %136 = inttoptr i32 %135 to i32*
  store i32 %127, i32* %136
  store volatile i64 14127, i64* @0
  %137 = load i32, i32* @ebp
  %138 = add i32 %137, -12
  %139 = inttoptr i32 %138 to i32*
  store i32 16386218, i32* %139
  store volatile i64 14134, i64* @0
  %140 = load i32, i32* @ebp
  %141 = add i32 %140, -12
  %142 = inttoptr i32 %141 to i32*
  %143 = load i32, i32* %142
  %144 = load i1, i1* @of
  %145 = shl i32 %143, 6
  %146 = icmp eq i32 %145, 0
  store i1 %146, i1* @zf
  %147 = icmp slt i32 %145, 0
  store i1 %147, i1* @sf
  %148 = trunc i32 %145 to i8
  %149 = call i8 @llvm.ctpop.i8(i8 %148)
  %150 = and i8 %149, 1
  %151 = icmp eq i8 %150, 0
  store i1 %151, i1* @pf
  %152 = load i32, i32* @ebp
  %153 = add i32 %152, -12
  %154 = inttoptr i32 %153 to i32*
  store i32 %145, i32* %154
  %155 = shl i32 %143, 5
  %156 = lshr i32 %155, 31
  %157 = trunc i32 %156 to i1
  store i1 %157, i1* @cf
  %158 = lshr i32 %145, 31
  %159 = icmp ne i32 %158, %156
  %160 = select i1 false, i1 %159, i1 %144
  store i1 %160, i1* @of
  store volatile i64 14138, i64* @0
  %161 = load i32, i32* @ebp
  %162 = add i32 %161, -12
  %163 = inttoptr i32 %162 to i32*
  %164 = load i32, i32* %163
  %165 = xor i32 %164, 1048703726
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %166 = icmp eq i32 %165, 0
  store i1 %166, i1* @zf
  %167 = icmp slt i32 %165, 0
  store i1 %167, i1* @sf
  %168 = trunc i32 %165 to i8
  %169 = call i8 @llvm.ctpop.i8(i8 %168)
  %170 = and i8 %169, 1
  %171 = icmp eq i8 %170, 0
  store i1 %171, i1* @pf
  %172 = load i32, i32* @ebp
  %173 = add i32 %172, -12
  %174 = inttoptr i32 %173 to i32*
  store i32 %165, i32* %174
  store volatile i64 14145, i64* @0
  %175 = load i32, i32* @ebp
  %176 = add i32 %175, -8
  %177 = inttoptr i32 %176 to i32*
  store i32 229867, i32* %177
  store volatile i64 14152, i64* @0
  %178 = load i32, i32* @ebp
  %179 = add i32 %178, -8
  %180 = inttoptr i32 %179 to i32*
  %181 = load i32, i32* %180
  %182 = add i32 %181, 7838
  %183 = and i32 %181, 15
  %184 = add i32 %183, 14
  %185 = icmp ugt i32 %184, 15
  %186 = icmp ult i32 %182, %181
  %187 = xor i32 %181, %182
  %188 = xor i32 7838, %182
  %189 = and i32 %187, %188
  %190 = icmp slt i32 %189, 0
  store i1 %185, i1* @az
  store i1 %186, i1* @cf
  store i1 %190, i1* @of
  %191 = icmp eq i32 %182, 0
  store i1 %191, i1* @zf
  %192 = icmp slt i32 %182, 0
  store i1 %192, i1* @sf
  %193 = trunc i32 %182 to i8
  %194 = call i8 @llvm.ctpop.i8(i8 %193)
  %195 = and i8 %194, 1
  %196 = icmp eq i8 %195, 0
  store i1 %196, i1* @pf
  %197 = load i32, i32* @ebp
  %198 = add i32 %197, -8
  %199 = inttoptr i32 %198 to i32*
  store i32 %182, i32* %199
  store volatile i64 14159, i64* @0
  %200 = load i32, i32* @ebp
  %201 = add i32 %200, -8
  %202 = inttoptr i32 %201 to i32*
  %203 = load i32, i32* %202
  %204 = xor i32 %203, 985971
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %205 = icmp eq i32 %204, 0
  store i1 %205, i1* @zf
  %206 = icmp slt i32 %204, 0
  store i1 %206, i1* @sf
  %207 = trunc i32 %204 to i8
  %208 = call i8 @llvm.ctpop.i8(i8 %207)
  %209 = and i8 %208, 1
  %210 = icmp eq i8 %209, 0
  store i1 %210, i1* @pf
  %211 = load i32, i32* @ebp
  %212 = add i32 %211, -8
  %213 = inttoptr i32 %212 to i32*
  store i32 %204, i32* %213
  store volatile i64 14166, i64* @0
  %214 = load i32, i32* @ebp
  %215 = add i32 %214, -4
  %216 = inttoptr i32 %215 to i32*
  store i32 11850407, i32* %216
  store volatile i64 14173, i64* @0
  %217 = load i32, i32* @ebp
  %218 = add i32 %217, -4
  %219 = inttoptr i32 %218 to i32*
  %220 = load i32, i32* %219
  store i32 %220, i32* @eax
  store volatile i64 14176, i64* @0
  %221 = load i32, i32* @esp
  %222 = sub i32 %221, 4
  %223 = inttoptr i32 %222 to i32*
  store i32 80, i32* %223
  store i32 %222, i32* @esp
  store volatile i64 14178, i64* @0
  %224 = load i32, i32* @esp
  %225 = inttoptr i32 %224 to i32*
  %226 = load i32, i32* %225
  store i32 %226, i32* @ecx
  %227 = add i32 %224, 4
  store i32 %227, i32* @esp
  store volatile i64 14179, i64* @0
  %228 = load i32, i32* @ecx
  %229 = load i32, i32* @eax
  %230 = zext i32 %229 to i64
  %231 = load i32, i32* @edx
  %232 = zext i32 %231 to i64
  %233 = shl i64 %232, 32
  %234 = or i64 %233, %230
  %235 = zext i32 %228 to i64
  %236 = udiv i64 %234, %235
  %237 = trunc i64 %236 to i32
  store i32 %237, i32* @eax
  %238 = urem i64 %234, %235
  %239 = trunc i64 %238 to i32
  store i32 %239, i32* @edx
  store volatile i64 14181, i64* @0
  %240 = load i32, i32* @esp
  %241 = sub i32 %240, 4
  %242 = inttoptr i32 %241 to i32*
  store i32 -1668266032, i32* %242
  store i32 %241, i32* @esp
  store volatile i64 14186, i64* @0
  %243 = load i32, i32* @eax
  %244 = load i32, i32* @ebp
  %245 = add i32 %244, -4
  %246 = inttoptr i32 %245 to i32*
  store i32 %243, i32* %246
  store volatile i64 14189, i64* @0
  %247 = load i32, i32* @ebp
  %248 = add i32 %247, -4
  %249 = inttoptr i32 %248 to i32*
  %250 = load i32, i32* %249
  %251 = load i1, i1* @of
  %252 = lshr i32 %250, 12
  %253 = icmp eq i32 %252, 0
  store i1 %253, i1* @zf
  %254 = icmp slt i32 %252, 0
  store i1 %254, i1* @sf
  %255 = trunc i32 %252 to i8
  %256 = call i8 @llvm.ctpop.i8(i8 %255)
  %257 = and i8 %256, 1
  %258 = icmp eq i8 %257, 0
  store i1 %258, i1* @pf
  %259 = load i32, i32* @ebp
  %260 = add i32 %259, -4
  %261 = inttoptr i32 %260 to i32*
  store i32 %252, i32* %261
  %262 = and i32 2048, %250
  %263 = icmp ne i32 %262, 0
  store i1 %263, i1* @cf
  %264 = icmp slt i32 %250, 0
  %265 = select i1 false, i1 %264, i1 %251
  store i1 %265, i1* @of
  store volatile i64 14193, i64* @0
  %266 = load i32, i32* @ebp
  %267 = add i32 %266, -4
  %268 = inttoptr i32 %267 to i32*
  %269 = load i32, i32* %268
  %270 = xor i32 %269, 508039
  store i1 false, i1* @az
  store i1 false, i1* @cf
  store i1 false, i1* @of
  %271 = icmp eq i32 %270, 0
  store i1 %271, i1* @zf
  %272 = icmp slt i32 %270, 0
  store i1 %272, i1* @sf
  %273 = trunc i32 %270 to i8
  %274 = call i8 @llvm.ctpop.i8(i8 %273)
  %275 = and i8 %274, 1
  %276 = icmp eq i8 %275, 0
  store i1 %276, i1* @pf
  %277 = load i32, i32* @ebp
  %278 = add i32 %277, -4
  %279 = inttoptr i32 %278 to i32*
  store i32 %270, i32* %279
  store volatile i64 14200, i64* @0
  %280 = load i32, i32* @ebp
  %281 = add i32 %280, -4
  %282 = inttoptr i32 %281 to i32*
  %283 = load i32, i32* %282
  store i32 %283, i32* @eax
  store volatile i64 14203, i64* @0
  %284 = load i32, i32* @ebp
  %285 = add i32 %284, -8
  %286 = inttoptr i32 %285 to i32*
  %287 = load i32, i32* %286
  store i32 %287, i32* @eax
  store volatile i64 14206, i64* @0
  %288 = load i32, i32* @ebp
  %289 = add i32 %288, -12
  %290 = inttoptr i32 %289 to i32*
  %291 = load i32, i32* %290
  store i32 %291, i32* @eax
  store volatile i64 14209, i64* @0
  %292 = load i32, i32* @ebp
  %293 = add i32 %292, -16
  %294 = inttoptr i32 %293 to i32*
  %295 = load i32, i32* %294
  store i32 %295, i32* @eax
  store volatile i64 14212, i64* @0
  %296 = load i32, i32* @ecx
  %297 = load i32, i32* @esp
  %298 = sub i32 %297, 4
  %299 = inttoptr i32 %298 to i32*
  store i32 %296, i32* %299
  store i32 %298, i32* @esp
  store volatile i64 14213, i64* @0
  %300 = load i32, i32* @esp
  %301 = sub i32 %300, 4
  %302 = inttoptr i32 %301 to i32*
  store i32 1989985150, i32* %302
  store i32 %301, i32* @esp
  store volatile i64 14218, i64* @0
  %303 = load i32, i32* @ecx
  %304 = load i32, i32* @esp
  %305 = sub i32 %304, 4
  %306 = inttoptr i32 %305 to i32*
  store i32 %303, i32* %306
  store i32 %305, i32* @esp
  store volatile i64 14219, i64* @0
  %307 = load i32, i32* @ecx
  %308 = load i32, i32* @esp
  %309 = sub i32 %308, 4
  %310 = inttoptr i32 %309 to i32*
  store i32 %307, i32* %310
  store i32 %309, i32* @esp
  store volatile i64 14220, i64* @0
  %311 = load i32, i32* @esp
  %312 = sub i32 %311, 4
  %313 = inttoptr i32 %312 to i32*
  store i32 99, i32* %313
  store i32 %312, i32* @esp
  store volatile i64 14222, i64* @0
  %314 = load i32, i32* @esp
  %315 = inttoptr i32 %314 to i32*
  %316 = load i32, i32* %315
  store i32 %316, i32* @ecx
  %317 = add i32 %314, 4
  store i32 %317, i32* @esp
  store volatile i64 14223, i64* @0
  %318 = load i32, i32* @esp
  %319 = sub i32 %318, 4
  %320 = inttoptr i32 %319 to i32*
  store i32 14228, i32* %320
  store i32 %319, i32* @esp
  call void @1(i32 5897)
  store volatile i64 14228, i64* @0
  %321 = load i32, i32* @esp
  %322 = add i32 %321, 20
  %323 = and i32 %321, 15
  %324 = add i32 %323, 4
  %325 = icmp ugt i32 %324, 15
  %326 = icmp ult i32 %322, %321
  %327 = xor i32 %321, %322
  %328 = xor i32 20, %322
  %329 = and i32 %327, %328
  %330 = icmp slt i32 %329, 0
  store i1 %325, i1* @az
  store i1 %326, i1* @cf
  store i1 %330, i1* @of
  %331 = icmp eq i32 %322, 0
  store i1 %331, i1* @zf
  %332 = icmp slt i32 %322, 0
  store i1 %332, i1* @sf
  %333 = trunc i32 %322 to i8
  %334 = call i8 @llvm.ctpop.i8(i8 %333)
  %335 = and i8 %334, 1
  %336 = icmp eq i8 %335, 0
  store i1 %336, i1* @pf
  store i32 %322, i32* @esp
  store volatile i64 14231, i64* @0
  %337 = load i32, i32* @esi
  %338 = load i32, i32* @esp
  %339 = sub i32 %338, 4
  %340 = inttoptr i32 %339 to i32*
  store i32 %337, i32* %340
  store i32 %339, i32* @esp
  store volatile i64 14232, i64* @0
  %341 = load i32, i32* @esi
  %342 = load i32, i32* @esp
  %343 = sub i32 %342, 4
  %344 = inttoptr i32 %343 to i32*
  store i32 %341, i32* %344
  store i32 %343, i32* @esp
  store volatile i64 14233, i64* @0
  %345 = load i32, i32* @esi
  %346 = load i32, i32* @esp
  %347 = sub i32 %346, 4
  %348 = inttoptr i32 %347 to i32*
  store i32 %345, i32* %348
  store i32 %347, i32* @esp
  store volatile i64 14234, i64* @0
  %349 = load i32, i32* @esi
  %350 = load i32, i32* @esp
  %351 = sub i32 %350, 4
  %352 = inttoptr i32 %351 to i32*
  store i32 %349, i32* %352
  store i32 %351, i32* @esp
  store volatile i64 14235, i64* @0
  %353 = load i32, i32* @esp
  %354 = sub i32 %353, 4
  %355 = inttoptr i32 %354 to i32*
  store i32 14237, i32* %355
  store i32 %354, i32* @esp
  %356 = load i32, i32* @eax
  call void @1(i32 %356)
  store volatile i64 14237, i64* @0
  %357 = load i32, i32* @esp
  %358 = inttoptr i32 %357 to i32*
  %359 = load i32, i32* %358
  store i32 %359, i32* @esi
  %360 = add i32 %357, 4
  store i32 %360, i32* @esp
  store volatile i64 14238, i64* @0
  %361 = load i32, i32* @ebp
  store i32 %361, i32* @esp
  store volatile i64 14240, i64* @0
  %362 = load i32, i32* @esp
  %363 = inttoptr i32 %362 to i32*
  %364 = load i32, i32* %363
  store i32 %364, i32* @ebp
  %365 = add i32 %362, 4
  store i32 %365, i32* @esp
}

declare void @1(i32)

declare void @2(i32)

declare void @3(i32)

declare void @4(i1, i32)

declare void @5(i3, x86_fp80)

declare x86_fp80 @6(i3)

; Function Attrs: nounwind readnone speculatable
declare i8 @llvm.ctpop.i8(i8) #0

attributes #0 = { nounwind readnone speculatable }
